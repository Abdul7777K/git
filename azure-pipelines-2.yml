trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Build_Deploy_appService
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: NodeTool@0
        displayName: 'Install Node.js 16.x'
        inputs:
          versionSpec: '16.x'
        

      - script: |
          npm install -g @angular/cli
          npm install
          ng build --configuration production 
        displayName: 'npm install and build'
        workingDirectory: '$(Build.SourcesDirectory)'

      - task: Docker@2
        displayName: Building_Docker_for_ACR
        inputs:
          containerRegistry: 'abu-container-registry'
          repository: 'angular-app'
          command: 'buildAndPush'
          Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
          tags: | 
            $(Build.BuildId)
            latest 
      - task: ArchiveFiles@2
        displayName: 'Archive files'
        inputs:
          rootFolderOrFile:  '$(System.DefaultWorkingDirectory)/dist/first-material/'
          includeRootFolder: false
          archiveType: zip
          archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
          replaceExistingArchive: true 
            
      - task: PublishBuildArtifacts@1
        displayName: 'Publishing_artifacts_for_webapp'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
          ArtifactName: 'Angular-Artifacts'
          publishLocation: 'Container' 

- stage: Development
  displayName: 'Dockerizing_process'
  dependsOn: Build_Deploy_appService
  condition: succeeded()
  jobs:
  - deployment: Deployment_to_ACR
    pool:
      vmImage: 'ubuntu-latest'
    environment: Development
    strategy:
      runOnce:
        deploy:
          steps:
            - task: DownloadPipelineArtifact@2
              displayName: 'Downloading artifacts for deployment'
              inputs:
                buildType: 'current'
                artifactName: 'Angular-Artifacts'
                targetPath:  '$(System.DefaultWorkingDirectory)'    
            - task: AzureCLI@2
              inputs:
                azureSubscription: 'abu-webapp-connection'
                scriptType: 'ps'
                scriptLocation: 'inlineScript'
                inlineScript: 'Az webapp deployment slot create --name Abu-appservice-QA |--resource-group Abu --slot staging'
            - task: AzureRmWebAppDeployment@4
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: 'abu-webapp-connection'
                appType: 'webAppLinux'
                WebAppName: 'Abu-appservice-QA'
                deployToSlotOrASE: true
                ResourceGroupName: 'Abu'
                SlotName: 'staging'
                packageForLinux: '$(Pipeline.Workspace)/Angular-Artifacts/*.zip'
            - task: AzureAppServiceManage@0
              inputs:
                azureSubscription: 'abu-webapp-connection'
                Action: 'Swap Slots'
                WebAppName: 'Abu-appservice-QA'
                ResourceGroupName: 'Abu'
                SourceSlot: 'staging'
